<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[默言，在路上]]></title>
  <link href="http://wennylover.github.com/atom.xml" rel="self"/>
  <link href="http://wennylover.github.com/"/>
  <updated>2013-11-12T13:40:54+09:00</updated>
  <id>http://wennylover.github.com/</id>
  <author>
    <name><![CDATA[默言]]></name>
    <email><![CDATA[rugang6891@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我在调查jpmobile过程中的总结]]></title>
    <link href="http://wennylover.github.com/blog/2013/11/12/the-summary-of-jpmobile/"/>
    <updated>2013-11-12T13:27:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/11/12/the-summary-of-jpmobile</id>
    <content type="html"><![CDATA[<h4>概述</h4>

<hr />

<p>JPMobile(<a href="https://github.com/jpmobile/jpmobile">Github</a>)，是一个rails的gem包，主要是用来简化针对日本不同的手机客户端view层的设计。<br/>
Ripple是一个chrome的plugin，可以模拟很多手机的浏览器。</p>

<!-- more -->


<h4>关于ruby的一些小知识</h4>

<hr />

<ul>
<li>Module.autoload is a instance_method</li>
<li>Kernel.autoload is not a instance_method</li>
<li>module_function : 定义模块方法</li>
<li>:: 引用顶级命名空间，例子 ::File</li>
<li><code>/^(?:abcde)/</code> 其中<code>?:</code>的意思是:只匹配exp,不捕获匹配的文本，也不给此分组分配组号。</li>
</ul>


<h4>有用的链接</h4>

<hr />

<ul>
<li><a href="http://www.openspc2.org/userAgent/">userAgent（ユーザーエージェント一覧）</a></li>
<li><a href="https://github.com/blackberry/Ripple-UI/issues/614">关于ripple不会发送mobile本身的user agent的过渡方案</a><br/>
上文中提到的可能要用到的路径：<code>C:\Users\dairg\AppData\Local\Google\Chrome\User Data\Default\Extensions\cnijnnaimeaacneklcndcafbnkeicckh\0.9.13_0\controllers</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在vim中进行ruby，rails的debug(针对ruby>=1.9 && use debugger-xml gem)]]></title>
    <link href="http://wennylover.github.com/blog/2013/11/11/how-to-install-debug-env-of-rails-on-vim/"/>
    <updated>2013-11-11T15:48:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/11/11/how-to-install-debug-env-of-rails-on-vim</id>
    <content type="html"><![CDATA[<h4>概要说明</h4>

<hr />

<p>关于具体的构筑手顺，参照vim-ruby-debugger中的Readme内容即可。
这里主要是写一些自己在构筑构成中碰到一些问题和注意事项。</p>

<!-- more -->


<h4>环境</h4>

<hr />

<p>CentOS 6.2<br/>
ruby 1.9.3p125 (2012-02-16 revision 34643)</p>

<h4>参考文章</h4>

<hr />

<ul>
<li><a href="http://nobyu.hatenadiary.jp/entry/20111204/1322982165">Railsアプリをvimでステップ実行する方法</a></li>
<li><a href="https://github.com/astashov/vim-ruby-debugger">vim-ruby-debugger plugin source in github</a></li>
<li><a href="https://github.com/astashov/debugger-xml">debugger-xml plugin source in github</a></li>
</ul>


<h4>事前准备</h4>

<hr />

<p>确认CentOS中是否有以下package。<br/>
* libXt<br/>
* libXt-devel<br/>
* glib<br/>
* gtk2<br/>
* gtk2-devel</p>

<p>特别注意：<br/>
1. 关于glib，gtk2，gtk2-devel，在vim源代码目录的src/INSTALL文件中有说明，如果要打开clientserver开关的话，需要安装这些package。<br/>
2. 一定要确认X11环境是否已经具备，特别是libXt-devel package。我构筑的时候就是没有这个环境，然后花费了很多时间。</p>

<h4>vim从源代码安装</h4>

<hr />

<ul>
<li>下载vim的源代码。 <a href="http://www.vim.org/">vim官网</a></li>
<li>进入vim 源代码目录，依次执行下面的命令。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure --with-features=huge --enable-multibyte --enable-pythoninterp --enable-rubyinterp --enable-cscope --enable-gui=gtk2 --prefix=$HOME/mytool --enable-gtk2-check --with-x
</span><span class='line'>make
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>由于我以前有vim的版本，并且vimfiles已经存在，所以为了让新安装的vim7.4也使用以前的vimfiles，做成了以下链接。<br/>
<code>ln -s /usr/share/vim/vimfiles ~/.vim</code></p></li>
<li><p>由于我把新版本安装到 <code>$HOME/mytool</code> 中，所以为了是默认的vim命令就是最新版本，在 <code>~/.bashrc</code> 中添加了如下内容。<br/>
<code>export path=$HOME/mytool/bin:$PATH</code></p></li>
</ul>


<p>特别注意：<br/>
1. 如果没有指定&#8211;prefix，那么会默认安装vim命令到/usr/bin,如果以前已经有vim版本，那么就会覆盖掉。所以如果想保留以前版本的话，最好使用&#8211;prefix参数，或者备份以前的vim命令。<br/>
2. 在执行完 <code>./configure</code> 后要确认一下屏幕输出的结果，主要是一些check是否都是yes，比如，以上提到的事前准备中的package不存在的话，那么会有一些头文件找不到的错误。<br/>
3. make完成后，<code>src/auto/config.log</code> 中的信息也很有用，出错的时候可以查看这个文件中是否有一些error。</p>

<h4>关于debugger-xml的版本问题</h4>

<hr />

<p>正常来讲，vim的clientserver，ruby，signs机能打开后，装入vim-ruby-debugger插件，并且本地安装了debugger-xml gem应该就是可以debug了。<br/>
但是，我使用了 <code>debugger-xml 0.3.2</code> 却总是无法启动 Rdebugger。大概调查了一下，可能是以下文件中，<code>ENV['IDE_PROCESS_DISPATCHER']</code>　无法取得的原因。</p>

<p><a href="https://github.com/astashov/debugger-xml/blob/master/lib/debugger/xml/multiprocess/pre_child.rb">source link</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">debugger</span><span class="o">-</span><span class="n">xml</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">debugger</span><span class="o">/</span><span class="n">xml</span><span class="o">/</span><span class="n">multiprocess</span><span class="o">/</span><span class="n">pre_child</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">acceptor_host</span><span class="p">,</span> <span class="n">acceptor_port</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;IDE_PROCESS_DISPATCHER&#39;</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">acceptor_host</span><span class="p">,</span> <span class="n">acceptor_port</span> <span class="o">=</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="n">acceptor_host</span> <span class="k">unless</span> <span class="n">acceptor_port</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来把debugger-xml的版本切换回 <code>0.2.0</code> 以后就可以正常 Rdebugger 了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(专题)如何在vim中进行ruby，rails的debug调试]]></title>
    <link href="http://wennylover.github.com/blog/2013/07/08/weekly-topic-20130708/"/>
    <updated>2013-07-08T20:54:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/07/08/weekly-topic-20130708</id>
    <content type="html"><![CDATA[<h4>前言</h4>

<p>本次主题是如何在vim中进行rails程序的debug调试。</p>

<!-- more -->


<h4>Vim准备</h4>

<ul>
<li><p>使用插件:<a href="https://github.com/astashov/vim-ruby-debugger">vim-ruby-debugger</a></p>

<p>  该插件需要vim7以上版本，并且编译时开启了clientserver，signs功能。</p></li>
<li><p>如何确认？</p>

<p>  在vim中运行version命令，查看结果中是否开启这两个功能。</p></li>
<li><p>如何在编译时开启client-server功能。</p>

<p>  由于client-server需要使用GUI的一些组件，所以必须开启GUI。而开启GUI，在Linux中需要依赖一些X11的东西。我的做法是:</p></li>
</ul>


<p>在Centos中，先安装以下package。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -yv install libXt libXt-devel \
</span><span class='line'>libXpm libXpm-devel \
</span><span class='line'>libX11 libX11-common.noarch libX11-devel \
</span><span class='line'>ghc-cairo-devel  cairo   \
</span><span class='line'>libgnomeui-devel \
</span><span class='line'>ncurses ncurses-devel  ncurses-libs ncurses-static \
</span><span class='line'>ghc-gtk-devel gtk+-devel \
</span><span class='line'>gtk2  gtk2-devel \
</span><span class='line'>atk-devel atk \
</span><span class='line'>libbonoboui libbonoboui-devel </span></code></pre></td></tr></table></div></figure>


<p>从vim源代码重新编译，按照如下参数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure \
</span><span class='line'>--with-features=huge \
</span><span class='line'>--enable-multibyte \
</span><span class='line'>--enable-pythoninterp \
</span><span class='line'>--enable-perlinterp \
</span><span class='line'>--enable-gpm \
</span><span class='line'>--enable-cscope \
</span><span class='line'>--enable-fontset \
</span><span class='line'>--disable-darwin \
</span><span class='line'>--enable-gui=auto \
</span><span class='line'>--disable-netbeans \
</span><span class='line'>--enable-gtk-check=no \
</span><span class='line'>--enable-gtk2-check=no \
</span><span class='line'>--enable-gnome-check=no \
</span><span class='line'>--enable-motif-check=no \
</span><span class='line'>--enable-athena-check=no \
</span><span class='line'>--enable-nextaw-check=no \
</span><span class='line'>--enable-carbon-check=no</span></code></pre></td></tr></table></div></figure>


<p>如果是ubuntu的情况下，可以参照如下连接（本人未测试）:<br/>
<a href="http://vim.wikia.com/wiki/Building_Vim">http://vim.wikia.com/wiki/Building_Vim</a></p>

<p>主要是安装以下package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev \
</span><span class='line'>  libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
</span><span class='line'>  libcairo2-dev libx11-dev libxpm-dev libxt-dev</span></code></pre></td></tr></table></div></figure>


<p>启动vim:  <code>vim --servername VIM</code></p>

<p>查看ruby-debug的帮助:<code>help ruby-debug</code></p>

<h4>Rails Debug</h4>

<ul>
<li>在Gemfile中添加如下:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ruby 1.8.7的时候</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;ruby-debug-ide&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Vim中启动debug: <code>:Rdebugger</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我常使用的rails gem包]]></title>
    <link href="http://wennylover.github.com/blog/2013/05/27/usual-used-rails-gems-by-me/"/>
    <updated>2013-05-27T18:56:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/05/27/usual-used-rails-gems-by-me</id>
    <content type="html"><![CDATA[<h4>前言</h4>

<p>这里主要是记述自己经常使用的一些gems，或者是偶尔看到的一些gems。</p>

<!-- more -->


<h4>Gems</h4>

<p>一个问卷调查的gem，可以通过DSL建立问卷<br/>
<a href="https://github.com/NUBIC/surveyor">surveyor(github)</a></p>

<p>认证的gem<br/>
<a href="https://github.com/plataformatec/devise">devise(github)</a></p>

<p>权限控制的gem<br/>
<a href="https://github.com/ryanb/cancan">cancan(github)</a></p>

<p>表单gem，view层的东西<br/>
<a href="https://github.com/justinfrench/formtastic">formtastic(github)</a></p>

<p>一个后台任务执行引擎<br/>
<a href="http://backgroundrb.rubyforge.org/">backgroundrb(rubyforge)</a><br/>
<a href="https://github.com/gnufied/backgroundrb">backgroundrb(github)</a></p>

<p>以下这个是对backgroundrb在rails3下面的支持<br/>
<a href="https://github.com/mtylty/backgroundrb-rails3">backgroundrb-rails3(github)</a></p>

<p>SSL控制的gem
<a href="http://rubygems.org/gems/bartt-ssl_requirement">bartt-ssl_requirement</a></p>

<h4>Rails Projects</h4>

<p>Teambox:协作平台
<a href="https://github.com/teambox/teambox">Teambox(github)</a></p>

<p>rails的博客系统RefineryCMS
<a href="https://github.com/resolve/refinerycms">RefineryCMS(github)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Rails中的SSL]]></title>
    <link href="http://wennylover.github.com/blog/2013/05/22/the-ssl-in-rails/"/>
    <updated>2013-05-22T10:59:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/05/22/the-ssl-in-rails</id>
    <content type="html"><![CDATA[<h4>关于force SSL请求的配置</h4>

<hr />

<p>只需要在config文件（比如application.rb）中添加如下配置:<br/>
<code>config.force_ssl = true</code></p>

<p>关于如何启动支持SSL的server，可以使用thin服务器。具体做法如下:</p>

<ul>
<li>在Gemfile中添加如下内容:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;thin&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<ul>
<li>启动ssl服务器的命令: <code>thin start --ssl</code></li>
</ul>


<h4>如果部分请求force ssl, 部分请求还是http的情况</h4>

<ul>
<li>在配置文件中做如下配置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">insert_before</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Static</span><span class="p">,</span> <span class="no">Rack</span><span class="o">::</span><span class="no">SSL</span><span class="p">,</span> <span class="ss">:exclude</span> <span class="o">=&gt;</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;HTTPS&#39;</span><span class="o">]</span> <span class="o">!=</span> <span class="s1">&#39;on&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">注</span><span class="mi">1</span><span class="err">：可能需要在头部</span> <span class="nb">require</span> <span class="s1">&#39;rack/ssl&#39;</span>
</span><span class='line'>  <span class="err">注</span><span class="mi">2</span><span class="err">：</span><span class="n">exclude</span><span class="err">就是针对那些请求不会包装成</span><span class="n">https</span><span class="err">的请求。比如上面的配置意思就是说，</span>
</span><span class='line'>    <span class="err">如果客户请求的是</span><span class="n">http</span><span class="err">（比如在地址栏输入的是</span><span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="err">），那么就去请求</span><span class="n">http</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在需要强制https的controller中添加 <code>before_filter</code>, 例如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_filter</span> <span class="ss">:force_ssl</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">force_ssl</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="n">request</span><span class="o">.</span><span class="n">ssl?</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="ss">:protocol</span> <span class="o">=&gt;</span> <span class="s1">&#39;https&#39;</span><span class="p">,</span> <span class="ss">:port</span> <span class="o">=&gt;</span> <span class="mi">3001</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这个时候测试的话可能需要启动两个服务器</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">thin</span> <span class="n">start</span> <span class="o">-</span><span class="nb">p</span> <span class="mi">3000</span>
</span><span class='line'><span class="n">thin</span> <span class="n">start</span> <span class="o">--</span><span class="n">ssl</span> <span class="o">-</span><span class="nb">p</span> <span class="mi">3001</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下网络设置]]></title>
    <link href="http://wennylover.github.com/blog/2013/04/11/linux-network-setting/"/>
    <updated>2013-04-11T17:26:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/04/11/linux-network-setting</id>
    <content type="html"><![CDATA[<h4>Ubuntu系统</h4>

<hr />

<ul>
<li>网络配置文件路径: <code>/etc/network/interfaces</code></li>
<li>路由设置配置文件路径: <code>/etc/resolv.conf</code><br/>
  注意有时候经常设置固定ip后上不了网，这个时候可能是因为dns配置没有修改过来。</li>
</ul>


<h4>CentOS系统</h4>

<hr />

<ul>
<li>网络配置文件路径:  <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code></li>
<li>路由设置配置文件路径: <code>/etc/resolv.conf</code> , 这个文件手动改不管用，会自动改回去，可以在上面的配置中加入DNS的配置，重启网络就可以自动重新配置这个文件。</li>
</ul>


<h4>特别注意</h4>

<hr />

<p>如果要在windows端手动的修改vmnet8的ip地址等，那么修改之后如果还需要让虚拟机访问外网，那么需要针对能够上外网的网卡进行共享配置。
比如现在是local network有限上网，那么就需要在本地网络的属性中有[共有]那个tab里面要把本地网络共享给vmnet8，这样的话，才可以在
虚拟机里面上外网。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails中helper的加载和相关设置，以及如何设置不全部加载所有helper]]></title>
    <link href="http://wennylover.github.com/blog/2013/04/10/rails-helper-load-and-setting/"/>
    <updated>2013-04-10T10:30:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/04/10/rails-helper-load-and-setting</id>
    <content type="html"><![CDATA[<h4>关于helper的总结</h4>

<hr />

<ul>
<li>rails默认为controller加载所有的helper，所以helper 方法无论写在那个文件中，都可以在view层调用。</li>
<li>设置不要默认加载所有的helper</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Rails &gt;= 3.1 时，通过在配置文件中，添加如下设置:  </span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">include_all_helpers</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Rails &lt; 3.1,默认在ApplicationController中有以下行，删除即可  </span>
</span><span class='line'><span class="n">helper</span> <span class="ss">:all</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果经过以上的配置，那么controller默认就只会加载自己对应的helper，如果controller有继承关系，那么也会加载父类对应的helper</li>
<li>通过在controller中使用以下方法，可以加载制定的helper: <code>helper CommonHelper</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails应用中timezones的正确用法]]></title>
    <link href="http://wennylover.github.com/blog/2013/03/08/the-guide-to-rails-time-zones/"/>
    <updated>2013-03-08T11:08:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/03/08/the-guide-to-rails-time-zones</id>
    <content type="html"><![CDATA[<h3>说明</h3>

<hr />

<p>本文参照翻译了以下博文:</p>

<p><a href="http://danilenko.org/2012/7/6/rails_timezones/">The Exhaustive Guide to Rails Time Zones</a><br/>
作者: Alexander</p>

<h3>正文</h3>

<hr />

<ul>
<li>得到当前时间

<blockquote><p><code>正确做法</code><br/>
Time.zone.now</p>

<p><code>可接受做法</code><br/>
Time.now.in_time_zone<br/>
DateTime.now.in_time_zone</p>

<p><code>错误做法</code><br/>
Time.now<br/>
DateTime.now</p></blockquote></li>
<li>得到日期（比如今天，昨天等）

<blockquote><p><code>正确做法</code><br/>
Time.zone.today<br/>
Time.zone.today - 1.day</p>

<p><code>可接受做法</code><br/>
Date.current<br/>
Date.yesterday</p>

<p><code>错误做法</code><br/>
Date.today</p></blockquote></li>
<li>生成Time（Build Time）

<blockquote><p><code>正确做法</code><br/>
Time.zone.local(2013, 3, 8, 10, 00)</p>

<p><code>错误做法</code><br/>
Time.new(2013, 3, 8, 10, 00)<br/>
DateTime.new(2013, 3, 8, 10, 00)</p></blockquote></li>
<li>从时间戳生成Time（Time from Timestamp）

<blockquote><p><code>正确做法</code><br/>
Time.zone.at(Timestamp)</p>

<p><code>可接受做法</code><br/>
Time.at(Timestamp).in_time_zone</p>

<p><code>错误做法</code><br/>
Time.at(Timestamp)</p></blockquote></li>
<li>解析时间（简单）

<blockquote><p><code>正确做法</code><br/>
Time.zone.parse(str)</p>

<p><code>错误做法</code><br/>
Time.parse(str)</p></blockquote></li>
<li>解析时间（按照严格格式）

<blockquote><p><code>正确做法</code><br/>
Time.zone.strptime(str, &#8220;%Y-%m-%d %H:%M %Z&#8221;)<br/>
注意：这种比较好的做法，需要引入作者自己写的gem。<a href="https://github.com/doz/time_zone_ext">TimeZoneExt</a></p>

<p><code>可接受做法</code><br/>
DateTime.strptime(str, &#8220;%Y-%m-%d %H:%M %Z&#8221;).in_time_zone</p>

<p><code>错误做法</code><br/>
DateTime.strptime(str, &#8220;%Y-%m-%d %H:%M %Z&#8221;)</p></blockquote></li>
<li>日期转时间（Get Time From Date）

<blockquote><p><code>正确做法</code><br/>
date.beginning_of_day</p>

<p><code>可接受做法</code><br/>
date.to_time_in_current_zone</p>

<p><code>错误做法</code><br/>
date.to_time</p></blockquote></li>
</ul>


<h3>注意事项</h3>

<hr />

<ul>
<li>ruby的标准库中，比如Time和DateTime类是没有考虑时区（TimeZone）的概念在里面的。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的octopress博客写法总结]]></title>
    <link href="http://wennylover.github.com/blog/2013/03/07/my-octopress-post-syntax/"/>
    <updated>2013-03-07T10:51:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/03/07/my-octopress-post-syntax</id>
    <content type="html"><![CDATA[<p>我的octopress博客写法遵循如下:</p>

<ul>
<li>写小标题分段如下:</li>
</ul>


<h4>小标题</h4>

<hr />

<ul>
<li>对于在句子中用到的命令，写法如下:</li>
</ul>


<p>这里是一个命令 <code>git status</code> ，用来查看当前git仓库的状态。</p>

<ul>
<li><p>使用 <code>*</code> 进行无须列表，使用 <code>1.</code> 进行有序列表</p></li>
<li><p>写链接</p></li>
</ul>


<p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/">一篇很好的讲到linux软连接和硬链接的文章</a></p>

<ul>
<li>写more, 这样的话就会在主页上显示到这个以上为止，其他的内容省略。(注意以下的感叹号是全角)<br/>
  &lt;！&#8211; more &#8211;></li>
</ul>


<h4>写代码片段</h4>

<p>方法1<br/>
（每行前面是一个tab，或者四个空格，特别注意，如果代码code片段前面是一个序列的时候，比如ul，ol，那么这种方法无效）</p>

<pre><code>路径：/usr/local/rvm/rubies/ruby-1.9.3-p286/lib/ruby/1.9.1/webrick
文件：server.rb
方法：GenericServer#start_thread
代码：
addr = sock.peeraddr 改为 addr = sock.peeraddr(:numeric)
</code></pre>

<p>方法2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s1">&#39;hello world&#39;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim常用总结]]></title>
    <link href="http://wennylover.github.com/blog/2013/03/07/vim-tips/"/>
    <updated>2013-03-07T10:44:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/03/07/vim-tips</id>
    <content type="html"><![CDATA[<h4>自动补全</h4>

<hr />

<ol>
<li><code>ctrl-x</code></li>
<li><code>help i_ctrl-x</code></li>
</ol>


<h4>收缩代码</h4>

<hr />

<ol>
<li>zf</li>
<li>zdgit</li>
<li>zo</li>
<li>zc</li>
<li>mkview</li>
<li>loadvie</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[windows下安装ctags]]></title>
    <link href="http://wennylover.github.com/blog/2013/03/07/install-ctags-on-windows/"/>
    <updated>2013-03-07T10:21:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/03/07/install-ctags-on-windows</id>
    <content type="html"><![CDATA[<h4>背景</h4>

<hr />

<p>在windows中安装了gvim后，如果使用了taglist等插件后，启动gvim，
会报错，因为找不到ctags命令，而在linux下，默认会安装ctags命令。</p>

<h4>安装过程</h4>

<hr />

<ol>
<li>下载安装包: <a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a></li>
<li>将下载的zip包解压到 <code>vim/vim73/</code> 目录下</li>
<li>将 <code>ctags/</code> 目录添加到环境变量path中</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby,Rails的一些概念和注意点]]></title>
    <link href="http://wennylover.github.com/blog/2013/02/05/ruby-rails-tips/"/>
    <updated>2013-02-05T14:39:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/02/05/ruby-rails-tips</id>
    <content type="html"><![CDATA[<h4>Ruby,Rails的一些概念</h4>

<hr />

<ul>
<li>rvm: ruby version manager, Ruby版本管理工具</li>
<li>gem(rubygem): 一个ruby程序，用来管理gem包的安装等，类似linux下的apt-get<br/>
  ruby1.9.2以前版本需要 <code>require 'rubygems'</code> ，ruby1.9.2开始已经自动包含gem。</li>
<li>bundle: 用来管理一个rails web工程的所有gem包的依赖，版本等。</li>
<li>rake: 一个gem包，也就是一个ruby程序，作用是用来执行其他用ruby开发的task的程序。</li>
<li>rack: A Ruby Webserver interface.是一个提供了一个ruby web服务器和ruby web框架之间的最小接口的gem程序。主要是web框架开发者用的。</li>
</ul>


<h4>Ruby,Rails的一些注意点</h4>

<hr />

<ul>
<li>.ru后缀的文件就是rackup文件。比如rails应用中的config.ru,可以通过 <code>rackup config.ru</code> 来执行rackup文件。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows常用命令]]></title>
    <link href="http://wennylover.github.com/blog/2013/01/25/usual-command-on-windows/"/>
    <updated>2013-01-25T16:50:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/01/25/usual-command-on-windows</id>
    <content type="html"><![CDATA[<ul>
<li>tracert www.github.com<br/>
可以查看到连接到host的路由经过，可以借此查看自己的外网IP。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用软件列表]]></title>
    <link href="http://wennylover.github.com/blog/2013/01/25/software-list/"/>
    <updated>2013-01-25T16:44:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/01/25/software-list</id>
    <content type="html"><![CDATA[<h3>Windows系</h3>

<hr />

<ul>
<li>VirtuaWin<br/>
  windows下的虚拟桌面软件（有portable版本）</li>
</ul>


<h3>Linux系</h3>

<hr />

<ul>
<li>rabbitvcs<br/>
  linux下的SVN client，类似windows下的TortoiseSVN。</li>
<li>nautinus<br/>
  Linux下的资源管理器（resource manager）。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在局域网（LAN）中访问webrick服务器速度过慢]]></title>
    <link href="http://wennylover.github.com/blog/2013/01/25/access-slow-of-webrick-in-the-lan/"/>
    <updated>2013-01-25T16:09:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/01/25/access-slow-of-webrick-in-the-lan</id>
    <content type="html"><![CDATA[<h3>问题现象描述</h3>

<hr />

<p>在Linux虚拟机中进行rails开发和server构建，通过外边的windows访问应用时，
速度很慢。</p>

<h3>对策一</h3>

<hr />

<p>参考帖子:  <a href="http://www.flatws.cn/article/program/ruby/2011-05-01/23456.html">http://www.flatws.cn/article/program/ruby/2011-05-01/23456.html</a></p>

<p>帖子内容总结（修改了两个文件）</p>

<p>修改文件1</p>

<pre><code>路径：/usr/local/rvm/rubies/ruby-1.9.3-p286/lib/ruby/1.9.1/webrick
文件：server.rb
方法：GenericServer#start_thread
代码：
addr = sock.peeraddr 改为 addr = sock.peeraddr(:numeric)
</code></pre>

<p>修改文件2</p>

<pre><code>路径：/usr/local/rvm/rubies/ruby-1.9.3-p286/lib/ruby/1.9.1/webrick
文件：httprequest.rb
方法：HTTPRequest#parse
代码：
@peeraddr = socket.respond_to?(:peeraddr) ? socket.peeraddr : []
改为
@peeraddr = socket.respond_to?(:peeraddr) ? socket.peeraddr(:numeric ) : []
</code></pre>

<h3>对策二</h3>

<hr />

<p>修改内容如下</p>

<pre><code>修改文件：#{RUBY_HOME}/lib/ruby/1.9.1/webrick/config.rb 
:DoNotReverseLookup =&gt; nil
改为
:DoNotReverseLookup =&gt; true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WindowsでNetBeansでrailsのDebug環境の構築(失敗した)]]></title>
    <link href="http://wennylover.github.com/blog/2013/01/25/the-install-of-rails-debug-env-of-netbeans-on-windows/"/>
    <updated>2013-01-25T15:36:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/01/25/the-install-of-rails-debug-env-of-netbeans-on-windows</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<hr />

<p>这里只是单纯的记录了自己在windows中为NetBeans构筑Debug环境过程中的一些
注意事项，主要是碰到一些错误。并且在windows这次没有成功。<br/>
特别注意: <em><strong>这里不是手顺</strong></em>。</p>

<!-- more -->


<h3>正文内容</h3>

<hr />

<ul>
<li>日本語構築手順<br/>
  http://www.terut.net/?p=314</li>
<li>windowsでDebug環境の構築（失敗っちゃた）</li>
</ul>


<p>■gemfiles に「gem &#8216;ruby-debug19&#8217;」を追加<br/>
■bundle install を実行する<br/>
■libv8 -v &#8216;3.3.10.4&#8217;　がインストールされてないです。</p>

<pre><code>原因：Checking for Python...Unable to build libv8: Python not found!
Pythonの環境がないです。

ご参照
http://stackoverflow.com/questions/9174328/fatal-error-while-bundle-install-while-installing-libv8
</code></pre>

<p>■ActivePythonをインストールする<br/>
■再Bundle install して、下記のエラーができ来ました。</p>

<pre><code>Installing therubyracer (0.9.10) with native extensions
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LinuxでNetBeansでrailsのDebug環境の構築]]></title>
    <link href="http://wennylover.github.com/blog/2013/01/25/the-install-of-rails-debug-env-of-netbeans-on-linux/"/>
    <updated>2013-01-25T14:58:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/01/25/the-install-of-rails-debug-env-of-netbeans-on-linux</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<hr />

<p>这里只是单纯的记录了自己在ubuntu中为NetBeans构筑Debug环境过程中的一些
注意事项，主要是碰到一些错误。<br/>
特别注意: <em><strong>这里不是手顺</strong></em>。</p>

<!-- more -->


<h3>正文内容</h3>

<hr />

<p>■一番最新のruby-debug-base19 (0.11.26)のインストールが必要です。</p>

<pre><code>ruby-debug-base19 (0.11.26)
ruby-debug-ide19 (0.4.12)
ruby-debug19 (0.11.6)

gem install ruby-debug19 -- --with-ruby-include=C:\ruby\Ruby193\include\ruby-1.9.1\ruby-1.9.3-p286
curl -OL http://rubyforge.org/frs/download.php/75415/ruby-debug-base19-0.11.26.gem
curl -OL http://rubyforge.org/frs/download.php/75414/linecache19-0.5.13.gem

====ご参照===
https://gist.github.com/1457544
http://ruby-china.org/topics/843
</code></pre>

<p>■environment.rbに下記のメソッドの追加が必要です。</p>

<pre><code># add by dairg 20121101
class String
  def is_binary_data?
    ( self.count( "^ -~", "^\r\n" ).fdiv(self.size) &gt; 0.3 || self.index( "\x00" ) ) unless empty?
  end
end

=====ご参照=====
http://stackoverflow.com/questions/8961367/aptana-3-ruby-debugger-exception-in-debugthread-loop-undefined-method-is-bin/9043481#9043481
</code></pre>

<p>■linecache19 (0.5.13)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux常用命令]]></title>
    <link href="http://wennylover.github.com/blog/2012/12/31/linuxchang-yong-ming-ling/"/>
    <updated>2012-12-31T23:47:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2012/12/31/linuxchang-yong-ming-ling</id>
    <content type="html"><![CDATA[<h3>桌面命令类</h3>

<hr />

<ul>
<li>切换到不同tty的命令 <code>chvt 1-7</code></li>
</ul>


<h3>实用命令类</h3>

<hr />

<ul>
<li>查看当前系统发行版的信息 <code>lsb_release</code></li>
<li>查看系统硬件信息目录 <code>/proc</code></li>
<li>文本处理三剑客 <code>grep</code> <code>sed</code> <code>awk</code>

<ol>
<li>grep:主要是查找字符串</li>
<li>sed:主要是以行为单位处理字符串</li>
<li>awk:主要是针对一行字符串，利用间隔符，对每一段进行处理</li>
</ol>
</li>
<li>列出所有打开的文件，可以进行各种网络调试等。 <code>lsof</code></li>
<li>强制kill: <code>kill -9 1234</code></li>
</ul>


<h3>设置类</h3>

<hr />

<ul>
<li>查看可用分辨率 <code>xrandr</code></li>
<li>设置分辨率 <code>xrandr -s 可用分辨率的具体数字</code></li>
<li>输出要添加到xorg文件中section minitor的内容 <code>gtf 1024 768 70</code>, 参数是分辨率和刷新频率</li>
<li>生成xorg文件 <code>xorg -configure</code>, 拷贝到 <code>/etc/X11/xorg.conf</code></li>
</ul>


<h3>好的参考资源</h3>

<hr />

<ul>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/">一篇很好的讲到linux软连接和硬链接的文章</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在ubuntu server中安装GUI界面]]></title>
    <link href="http://wennylover.github.com/blog/2012/12/30/ru-he-zai-ubuntu-serverzhong-an-zhuang-guijie-mian/"/>
    <updated>2012-12-30T13:41:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2012/12/30/ru-he-zai-ubuntu-serverzhong-an-zhuang-guijie-mian</id>
    <content type="html"><![CDATA[<h3>关于ubuntu server</h3>

<p>其实个人认为ubuntu server和ubuntu desktop版本没有什么本质的区别，只是默认安装的软件/组件不同而已。
比如ubuntu server默认会安装很多服务，比如mysql，apache等等，而desktop版本会默认安装一些常用的办公软件等。
ubuntu server默认不安装桌面环境，如果需要的话可以按照以下步骤进行安装。</p>

<h3>安装GUI步骤</h3>

<pre><code>1. apt-get install xinit
2. apt-get install gdm
3. apt-get install ubuntu-desktop
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first blog]]></title>
    <link href="http://wennylover.github.com/blog/2012/12/22/my-first-blog/"/>
    <updated>2012-12-22T20:30:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2012/12/22/my-first-blog</id>
    <content type="html"><![CDATA[<p>hello, octopress!
hello, rails!</p>
]]></content>
  </entry>
  
</feed>
