<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 默言，在路上]]></title>
  <link href="http://wennylover.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://wennylover.github.com/"/>
  <updated>2013-05-28T16:53:42+09:00</updated>
  <id>http://wennylover.github.com/</id>
  <author>
    <name><![CDATA[默言]]></name>
    <email><![CDATA[rugang6891@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我常使用的rails gem包]]></title>
    <link href="http://wennylover.github.com/blog/2013/05/27/usual-used-rails-gems-by-me/"/>
    <updated>2013-05-27T18:56:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/05/27/usual-used-rails-gems-by-me</id>
    <content type="html"><![CDATA[<h4>前言</h4>

<p>这里主要是记述自己经常使用的一些gems，或者是偶尔看到的一些gems。</p>

<!-- more -->


<h4>Gems</h4>

<p>一个问卷调查的gem，可以通过DSL建立问卷<br/>
https://github.com/NUBIC/surveyor</p>

<p>认证的gem<br/>
https://github.com/plataformatec/devise</p>

<p>权限控制的gem<br/>
https://github.com/ryanb/cancan</p>

<p>表单gem，view层的东西<br/>
https://github.com/justinfrench/formtastic</p>

<p>一个后台任务执行引擎<br/>
http://backgroundrb.rubyforge.org/
https://github.com/gnufied/backgroundrb</p>

<p>以下这个是对backgroundrb在rails3下面的支持<br/>
https://github.com/mtylty/backgroundrb-rails3</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Rails中的SSL]]></title>
    <link href="http://wennylover.github.com/blog/2013/05/22/the-ssl-in-rails/"/>
    <updated>2013-05-22T10:59:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/05/22/the-ssl-in-rails</id>
    <content type="html"><![CDATA[<h4>关于force SSL请求的配置</h4>

<hr />

<p>只需要在config文件（比如application.rb）中添加如下配置:<br/>
<code>config.force_ssl = true</code></p>

<p>关于如何启动支持SSL的server，可以使用thin服务器。具体做法如下:</p>

<ul>
<li>在Gemfile中添加如下内容:</li>
</ul>


<p>```ruby</p>

<pre><code>group :development do
  gem 'thin'
end
</code></pre>

<p>```</p>

<!-- more -->


<ul>
<li>启动ssl服务器的命令: <code>thin start --ssl</code></li>
</ul>


<h4>如果部分请求force ssl, 部分请求还是http的情况</h4>

<ul>
<li>在配置文件中做如下配置</li>
</ul>


<p>```ruby</p>

<pre><code>config.middleware.insert_before ActionDispatch::Static, Rack::SSL, :exclude =&gt; proc { |env| env['HTTPS'] != 'on' }
</code></pre>

<p>  注1：可能需要在头部 require 'rack/ssl'
  注2：exclude就是针对那些请求不会包装成https的请求。比如上面的配置意思就是说，</p>

<pre><code>    如果客户请求的是http（比如在地址栏输入的是http://localhost），那么就去请求http
</code></pre>

<p>```</p>

<ul>
<li>在需要强制https的controller中添加 <code>before_filter</code>, 例如：</li>
</ul>


<p>```ruby</p>

<pre><code>before_filter :force_ssl

def force_ssl
  if !request.ssl?
    redirect_to :protocol =&gt; 'https', :port =&gt; 3001
  end
end
</code></pre>

<p>```</p>

<ul>
<li>这个时候测试的话可能需要启动两个服务器<br/>
<code>
  thin start -p 3000  
  thin start -ssl -p 3001  
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails中helper的加载和相关设置，以及如何设置不全部加载所有helper]]></title>
    <link href="http://wennylover.github.com/blog/2013/04/10/rails-helper-load-and-setting/"/>
    <updated>2013-04-10T10:30:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/04/10/rails-helper-load-and-setting</id>
    <content type="html"><![CDATA[<h4>关于helper的总结</h4>

<hr />

<ul>
<li>rails默认为controller加载所有的helper，所以helper 方法无论写在那个文件中，都可以在view层调用。</li>
<li><p>设置不要默认加载所有的helper
```ruby
  # Rails >= 3.1 时，通过在配置文件中，添加如下设置:<br/>
  config.action_controller.include_all_helpers = false</p>

<p>  # Rails &lt; 3.1,默认在ApplicationController中有以下行，删除即可<br/>
  helper :all
```</p></li>
<li><p>如果经过以上的配置，那么controller默认就只会加载自己对应的helper，如果controller有继承关系，那么也会加载父类对应的helper</p></li>
<li>通过在controller中使用以下方法，可以加载制定的helper: <code>helper CommonHelper</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails应用中timezones的正确用法]]></title>
    <link href="http://wennylover.github.com/blog/2013/03/08/the-guide-to-rails-time-zones/"/>
    <updated>2013-03-08T11:08:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/03/08/the-guide-to-rails-time-zones</id>
    <content type="html"><![CDATA[<h3>说明</h3>

<hr />

<p>本文参照翻译了以下博文:</p>

<p><a href="http://danilenko.org/2012/7/6/rails_timezones/">The Exhaustive Guide to Rails Time Zones</a><br/>
作者: Alexander</p>

<h3>正文</h3>

<hr />

<ul>
<li>得到当前时间

<blockquote><p><code>正确做法</code><br/>
Time.zone.now</p>

<p><code>可接受做法</code><br/>
Time.now.in_time_zone<br/>
DateTime.now.in_time_zone</p>

<p><code>错误做法</code><br/>
Time.now<br/>
DateTime.now</p></blockquote></li>
<li>得到日期（比如今天，昨天等）

<blockquote><p><code>正确做法</code><br/>
Time.zone.today<br/>
Time.zone.today - 1.day</p>

<p><code>可接受做法</code><br/>
Date.current<br/>
Date.yesterday</p>

<p><code>错误做法</code><br/>
Date.today</p></blockquote></li>
<li>生成Time（Build Time）

<blockquote><p><code>正确做法</code><br/>
Time.zone.local(2013, 3, 8, 10, 00)</p>

<p><code>错误做法</code><br/>
Time.new(2013, 3, 8, 10, 00)<br/>
DateTime.new(2013, 3, 8, 10, 00)</p></blockquote></li>
<li>从时间戳生成Time（Time from Timestamp）

<blockquote><p><code>正确做法</code><br/>
Time.zone.at(Timestamp)</p>

<p><code>可接受做法</code><br/>
Time.at(Timestamp).in_time_zone</p>

<p><code>错误做法</code><br/>
Time.at(Timestamp)</p></blockquote></li>
<li>解析时间（简单）

<blockquote><p><code>正确做法</code><br/>
Time.zone.parse(str)</p>

<p><code>错误做法</code><br/>
Time.parse(str)</p></blockquote></li>
<li>解析时间（按照严格格式）

<blockquote><p><code>正确做法</code><br/>
Time.zone.strptime(str, "%Y-%m-%d %H:%M %Z")<br/>
注意：这种比较好的做法，需要引入作者自己写的gem。<a href="https://github.com/doz/time_zone_ext">TimeZoneExt</a></p>

<p><code>可接受做法</code><br/>
DateTime.strptime(str, "%Y-%m-%d %H:%M %Z").in_time_zone</p>

<p><code>错误做法</code><br/>
DateTime.strptime(str, "%Y-%m-%d %H:%M %Z")</p></blockquote></li>
<li>日期转时间（Get Time From Date）

<blockquote><p><code>正确做法</code><br/>
date.beginning_of_day</p>

<p><code>可接受做法</code><br/>
date.to_time_in_current_zone</p>

<p><code>错误做法</code><br/>
date.to_time</p></blockquote></li>
</ul>


<h3>注意事项</h3>

<hr />

<ul>
<li>ruby的标准库中，比如Time和DateTime类是没有考虑时区（TimeZone）的概念在里面的。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby,Rails的一些概念和注意点]]></title>
    <link href="http://wennylover.github.com/blog/2013/02/05/ruby-rails-tips/"/>
    <updated>2013-02-05T14:39:00+09:00</updated>
    <id>http://wennylover.github.com/blog/2013/02/05/ruby-rails-tips</id>
    <content type="html"><![CDATA[<h4>Ruby,Rails的一些概念</h4>

<hr />

<ul>
<li>rvm: ruby version manager, Ruby版本管理工具</li>
<li>gem(rubygem): 一个ruby程序，用来管理gem包的安装等，类似linux下的apt-get<br/>
  ruby1.9.2以前版本需要 <code>require 'rubygems'</code> ，ruby1.9.2开始已经自动包含gem。</li>
<li>bundle: 用来管理一个rails web工程的所有gem包的依赖，版本等。</li>
<li>rake: 一个gem包，也就是一个ruby程序，作用是用来执行其他用ruby开发的task的程序。</li>
<li>rack: A Ruby Webserver interface.是一个提供了一个ruby web服务器和ruby web框架之间的最小接口的gem程序。主要是web框架开发者用的。</li>
</ul>


<h4>Ruby,Rails的一些注意点</h4>

<hr />

<ul>
<li>.ru后缀的文件就是rackup文件。比如rails应用中的config.ru,可以通过 <code>rackup config.ru</code> 来执行rackup文件。</li>
</ul>

]]></content>
  </entry>
  
</feed>
